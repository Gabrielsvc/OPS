//
// auto-generated by ops.py//




#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#define OPS_3D
#include  "ops_lib_cpp.h"

//
// ops_par_loop declarations
//

void ops_par_loop_init_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );



#include "data.h"

//#include "init_kernel.h"
//#include "print_kernel.h"

int nx;
int ny;
int nz;
int iter;

 int main(int argc, char **argv)
{

  nx = 256;
  ny = 256;
  nz = 256;
  iter = 10;


  ops_init(argc,argv,1);


  ops_block heat3D = ops_decl_block(3, "Heat3D");

  int d_p[3] = {0,0,0};
  int d_m[3] = {0,0,0};
  int size[3] = {nx, ny, nz};
  int base[3] = {0,0,0};
  double* temp = NULL;

  ops_dat h_u     = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_u");
  ops_dat h_temp  = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_tmp");
  ops_dat h_du    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_du");
  ops_dat h_ax    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_ax");
  ops_dat h_bx    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_bx");
  ops_dat h_cx    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_cx");
  ops_dat h_ay    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_ay");
  ops_dat h_by    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_by");
  ops_dat h_cy    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_cy");
  ops_dat h_az    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_az");
  ops_dat h_bz    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_bz");
  ops_dat h_cz    = ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_cz");

  int s3D_000[]         = {0,0,0};
  ops_stencil S3D_000 = ops_decl_stencil( 3, 1, s3D_000, "000");

  ops_decl_const2( "nx",1, "int",&nx);
  ops_decl_const2( "ny",1, "int",&ny);
  ops_decl_const2( "nz",1, "int",&nz);

  ops_partition("2D_BLOCK_DECOMPSE");

  double ct0, ct1, et0, et1;

  printf("\nGrid dimensions: %d x %d x %d\n", nx, ny, nz);

  int iter_range[] = {0,nx,0,ny, 0, nz};
  ops_par_loop_init_kernel("init_kernel", heat3D, 3, iter_range,
               ops_arg_dat(h_u, 1, S3D_000, "double", OPS_WRITE),
               ops_arg_idx());

  ops_timers(&ct0, &et0);

  for(int it = 0; it<iter; it++) {


  }
  ops_timers(&ct1, &et1);


  ops_print_dat_to_txtfile(h_u, "h_u.dat");


  for(int k=0; k<2; k++) {
    printf("k = %i\n",k);
    for(int j=0; j<MIN(ny,17); j++) {
      printf(" %d   ", j);
      for(int i=0; i<MIN(nx,17); i++) {
        int ind = i + j*nx + k*nx*ny;
        printf(" %5.5g ", ((double *)h_u->data)[ind]);
      }
      printf("\n");
    }
    printf("\n");
  }

  for(int k=0; k<2; k++) {
    printf("k = %i\n",k);
    for(int j=0; j<MIN(ny,17); j++) {
      printf(" %d   ", j);
      for(int i=MAX(0,nx-17); i<nx; i++) {
        int ind = i + j*nx + k*nx*ny;
        printf(" %5.5g ", ((double *)h_u->data)[ind]);
      }
      printf("\n");
    }
    printf("\n");
  }

  ops_printf("\nTotal Wall time %lf\n",et1-et0);
  ops_exit();
}