//
// auto-generated by ops.py
//
__constant__ int xdim0_taylor_green_vortex_block0_10_kernel;
int xdim0_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim0_taylor_green_vortex_block0_10_kernel;
int ydim0_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim1_taylor_green_vortex_block0_10_kernel;
int xdim1_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim1_taylor_green_vortex_block0_10_kernel;
int ydim1_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim2_taylor_green_vortex_block0_10_kernel;
int xdim2_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim2_taylor_green_vortex_block0_10_kernel;
int ydim2_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim3_taylor_green_vortex_block0_10_kernel;
int xdim3_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim3_taylor_green_vortex_block0_10_kernel;
int ydim3_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim4_taylor_green_vortex_block0_10_kernel;
int xdim4_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim4_taylor_green_vortex_block0_10_kernel;
int ydim4_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim5_taylor_green_vortex_block0_10_kernel;
int xdim5_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim5_taylor_green_vortex_block0_10_kernel;
int ydim5_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim6_taylor_green_vortex_block0_10_kernel;
int xdim6_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim6_taylor_green_vortex_block0_10_kernel;
int ydim6_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim7_taylor_green_vortex_block0_10_kernel;
int xdim7_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim7_taylor_green_vortex_block0_10_kernel;
int ydim7_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim8_taylor_green_vortex_block0_10_kernel;
int xdim8_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim8_taylor_green_vortex_block0_10_kernel;
int ydim8_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim9_taylor_green_vortex_block0_10_kernel;
int xdim9_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim9_taylor_green_vortex_block0_10_kernel;
int ydim9_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim10_taylor_green_vortex_block0_10_kernel;
int xdim10_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim10_taylor_green_vortex_block0_10_kernel;
int ydim10_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim11_taylor_green_vortex_block0_10_kernel;
int xdim11_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim11_taylor_green_vortex_block0_10_kernel;
int ydim11_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim12_taylor_green_vortex_block0_10_kernel;
int xdim12_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim12_taylor_green_vortex_block0_10_kernel;
int ydim12_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim13_taylor_green_vortex_block0_10_kernel;
int xdim13_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim13_taylor_green_vortex_block0_10_kernel;
int ydim13_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim14_taylor_green_vortex_block0_10_kernel;
int xdim14_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim14_taylor_green_vortex_block0_10_kernel;
int ydim14_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim15_taylor_green_vortex_block0_10_kernel;
int xdim15_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim15_taylor_green_vortex_block0_10_kernel;
int ydim15_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim16_taylor_green_vortex_block0_10_kernel;
int xdim16_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim16_taylor_green_vortex_block0_10_kernel;
int ydim16_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim17_taylor_green_vortex_block0_10_kernel;
int xdim17_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim17_taylor_green_vortex_block0_10_kernel;
int ydim17_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim18_taylor_green_vortex_block0_10_kernel;
int xdim18_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim18_taylor_green_vortex_block0_10_kernel;
int ydim18_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim19_taylor_green_vortex_block0_10_kernel;
int xdim19_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim19_taylor_green_vortex_block0_10_kernel;
int ydim19_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim20_taylor_green_vortex_block0_10_kernel;
int xdim20_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim20_taylor_green_vortex_block0_10_kernel;
int ydim20_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim21_taylor_green_vortex_block0_10_kernel;
int xdim21_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim21_taylor_green_vortex_block0_10_kernel;
int ydim21_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim22_taylor_green_vortex_block0_10_kernel;
int xdim22_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim22_taylor_green_vortex_block0_10_kernel;
int ydim22_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int xdim23_taylor_green_vortex_block0_10_kernel;
int xdim23_taylor_green_vortex_block0_10_kernel_h = -1;
__constant__ int ydim23_taylor_green_vortex_block0_10_kernel;
int ydim23_taylor_green_vortex_block0_10_kernel_h = -1;

#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6
#undef OPS_ACC7
#undef OPS_ACC8
#undef OPS_ACC9
#undef OPS_ACC10
#undef OPS_ACC11
#undef OPS_ACC12
#undef OPS_ACC13
#undef OPS_ACC14
#undef OPS_ACC15
#undef OPS_ACC16
#undef OPS_ACC17
#undef OPS_ACC18
#undef OPS_ACC19
#undef OPS_ACC20
#undef OPS_ACC21
#undef OPS_ACC22
#undef OPS_ACC23


#define OPS_ACC0(x,y,z) (x+xdim0_taylor_green_vortex_block0_10_kernel*(y)+xdim0_taylor_green_vortex_block0_10_kernel*ydim0_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC1(x,y,z) (x+xdim1_taylor_green_vortex_block0_10_kernel*(y)+xdim1_taylor_green_vortex_block0_10_kernel*ydim1_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC2(x,y,z) (x+xdim2_taylor_green_vortex_block0_10_kernel*(y)+xdim2_taylor_green_vortex_block0_10_kernel*ydim2_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC3(x,y,z) (x+xdim3_taylor_green_vortex_block0_10_kernel*(y)+xdim3_taylor_green_vortex_block0_10_kernel*ydim3_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC4(x,y,z) (x+xdim4_taylor_green_vortex_block0_10_kernel*(y)+xdim4_taylor_green_vortex_block0_10_kernel*ydim4_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC5(x,y,z) (x+xdim5_taylor_green_vortex_block0_10_kernel*(y)+xdim5_taylor_green_vortex_block0_10_kernel*ydim5_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC6(x,y,z) (x+xdim6_taylor_green_vortex_block0_10_kernel*(y)+xdim6_taylor_green_vortex_block0_10_kernel*ydim6_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC7(x,y,z) (x+xdim7_taylor_green_vortex_block0_10_kernel*(y)+xdim7_taylor_green_vortex_block0_10_kernel*ydim7_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC8(x,y,z) (x+xdim8_taylor_green_vortex_block0_10_kernel*(y)+xdim8_taylor_green_vortex_block0_10_kernel*ydim8_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC9(x,y,z) (x+xdim9_taylor_green_vortex_block0_10_kernel*(y)+xdim9_taylor_green_vortex_block0_10_kernel*ydim9_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC10(x,y,z) (x+xdim10_taylor_green_vortex_block0_10_kernel*(y)+xdim10_taylor_green_vortex_block0_10_kernel*ydim10_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC11(x,y,z) (x+xdim11_taylor_green_vortex_block0_10_kernel*(y)+xdim11_taylor_green_vortex_block0_10_kernel*ydim11_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC12(x,y,z) (x+xdim12_taylor_green_vortex_block0_10_kernel*(y)+xdim12_taylor_green_vortex_block0_10_kernel*ydim12_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC13(x,y,z) (x+xdim13_taylor_green_vortex_block0_10_kernel*(y)+xdim13_taylor_green_vortex_block0_10_kernel*ydim13_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC14(x,y,z) (x+xdim14_taylor_green_vortex_block0_10_kernel*(y)+xdim14_taylor_green_vortex_block0_10_kernel*ydim14_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC15(x,y,z) (x+xdim15_taylor_green_vortex_block0_10_kernel*(y)+xdim15_taylor_green_vortex_block0_10_kernel*ydim15_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC16(x,y,z) (x+xdim16_taylor_green_vortex_block0_10_kernel*(y)+xdim16_taylor_green_vortex_block0_10_kernel*ydim16_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC17(x,y,z) (x+xdim17_taylor_green_vortex_block0_10_kernel*(y)+xdim17_taylor_green_vortex_block0_10_kernel*ydim17_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC18(x,y,z) (x+xdim18_taylor_green_vortex_block0_10_kernel*(y)+xdim18_taylor_green_vortex_block0_10_kernel*ydim18_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC19(x,y,z) (x+xdim19_taylor_green_vortex_block0_10_kernel*(y)+xdim19_taylor_green_vortex_block0_10_kernel*ydim19_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC20(x,y,z) (x+xdim20_taylor_green_vortex_block0_10_kernel*(y)+xdim20_taylor_green_vortex_block0_10_kernel*ydim20_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC21(x,y,z) (x+xdim21_taylor_green_vortex_block0_10_kernel*(y)+xdim21_taylor_green_vortex_block0_10_kernel*ydim21_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC22(x,y,z) (x+xdim22_taylor_green_vortex_block0_10_kernel*(y)+xdim22_taylor_green_vortex_block0_10_kernel*ydim22_taylor_green_vortex_block0_10_kernel*(z))
#define OPS_ACC23(x,y,z) (x+xdim23_taylor_green_vortex_block0_10_kernel*(y)+xdim23_taylor_green_vortex_block0_10_kernel*ydim23_taylor_green_vortex_block0_10_kernel*(z))

//user function
__device__

 void taylor_green_vortex_block0_10_kernel_gpu(const double *wk3 , const double *u0 , const double *wk7 , const double *p ,
const double *wk1 , const double *wk2 , const double *wk8 , const double *wk5 , const double *wk6 , const double *rho ,
const double *rhou2 , const double *rhou1 , const double *wk4 , const double *rhou0 , const double *rhoE , const double
*u1 , const double *u2 , const double *wk0 , const double *T , double *wk10 , double *wk11 , double *wk12 , double *wk13
, double *wk9)
{
    wk9[OPS_ACC23(0,0,0)] = -0.5*rinv1*((rc2)*rho[OPS_ACC9(0,0,-2)]*u2[OPS_ACC16(0,0,-2)] -
      rc3*rho[OPS_ACC9(0,0,-1)]*u2[OPS_ACC16(0,0,-1)] + (rc3)*rho[OPS_ACC9(0,0,1)]*u2[OPS_ACC16(0,0,1)] -
      rc2*rho[OPS_ACC9(0,0,2)]*u2[OPS_ACC16(0,0,2)]) - 0.5*rinv1*((rc2)*rho[OPS_ACC9(0,0,-2)] -
      rc3*rho[OPS_ACC9(0,0,-1)] + (rc3)*rho[OPS_ACC9(0,0,1)] - rc2*rho[OPS_ACC9(0,0,2)])*u2[OPS_ACC16(0,0,0)] -
      0.5*rinv4*((rc2)*rho[OPS_ACC9(0,-2,0)]*u1[OPS_ACC15(0,-2,0)] - rc3*rho[OPS_ACC9(0,-1,0)]*u1[OPS_ACC15(0,-1,0)] +
      (rc3)*rho[OPS_ACC9(0,1,0)]*u1[OPS_ACC15(0,1,0)] - rc2*rho[OPS_ACC9(0,2,0)]*u1[OPS_ACC15(0,2,0)]) -
      0.5*rinv4*((rc2)*rho[OPS_ACC9(0,-2,0)] - rc3*rho[OPS_ACC9(0,-1,0)] + (rc3)*rho[OPS_ACC9(0,1,0)] -
      rc2*rho[OPS_ACC9(0,2,0)])*u1[OPS_ACC15(0,0,0)] - 0.5*rinv5*((rc2)*rho[OPS_ACC9(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] -
      rc3*rho[OPS_ACC9(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rho[OPS_ACC9(1,0,0)]*u0[OPS_ACC1(1,0,0)] -
      rc2*rho[OPS_ACC9(2,0,0)]*u0[OPS_ACC1(2,0,0)]) - 0.5*rinv5*((rc2)*rho[OPS_ACC9(-2,0,0)] - rc3*rho[OPS_ACC9(-1,0,0)]
      + (rc3)*rho[OPS_ACC9(1,0,0)] - rc2*rho[OPS_ACC9(2,0,0)])*u0[OPS_ACC1(0,0,0)] - 0.5*(wk3[OPS_ACC0(0,0,0)] +
      wk6[OPS_ACC8(0,0,0)] + wk7[OPS_ACC2(0,0,0)])*rho[OPS_ACC9(0,0,0)];
    wk10[OPS_ACC19(0,0,0)] = -0.5*sqrt(rinv6)*((rc2)*rhou0[OPS_ACC13(0,-2,0)]*u1[OPS_ACC15(0,-2,0)] -
      rc3*rhou0[OPS_ACC13(0,-1,0)]*u1[OPS_ACC15(0,-1,0)] + (rc3)*rhou0[OPS_ACC13(0,1,0)]*u1[OPS_ACC15(0,1,0)] -
      rc2*rhou0[OPS_ACC13(0,2,0)]*u1[OPS_ACC15(0,2,0)]) - 0.5*sqrt(rinv6)*((rc2)*rhou0[OPS_ACC13(0,-2,0)] -
      rc3*rhou0[OPS_ACC13(0,-1,0)] + (rc3)*rhou0[OPS_ACC13(0,1,0)] - rc2*rhou0[OPS_ACC13(0,2,0)])*u1[OPS_ACC15(0,0,0)] -
      0.5*sqrt(rinv7)*((rc2)*rhou0[OPS_ACC13(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] -
      rc3*rhou0[OPS_ACC13(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhou0[OPS_ACC13(1,0,0)]*u0[OPS_ACC1(1,0,0)] -
      rc2*rhou0[OPS_ACC13(2,0,0)]*u0[OPS_ACC1(2,0,0)]) - sqrt(rinv7)*((rc2)*p[OPS_ACC3(-2,0,0)] -
      rc3*p[OPS_ACC3(-1,0,0)] + (rc3)*p[OPS_ACC3(1,0,0)] - rc2*p[OPS_ACC3(2,0,0)]) -
      0.5*sqrt(rinv7)*((rc2)*rhou0[OPS_ACC13(-2,0,0)] - rc3*rhou0[OPS_ACC13(-1,0,0)] + (rc3)*rhou0[OPS_ACC13(1,0,0)] -
      rc2*rhou0[OPS_ACC13(2,0,0)])*u0[OPS_ACC1(0,0,0)] + rinv8*(sqrt(rinv6)*((rc2)*wk4[OPS_ACC12(0,-2,0)] -
      rc3*wk4[OPS_ACC12(0,-1,0)] + (rc3)*wk4[OPS_ACC12(0,1,0)] - rc2*wk4[OPS_ACC12(0,2,0)]) +
      rinv6*(-rc10*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(0,-2,0)] + (rc11)*u0[OPS_ACC1(0,-1,0)] +
      (rc11)*u0[OPS_ACC1(0,1,0)] - rc2*u0[OPS_ACC1(0,2,0)])) + rinv8*(sqrt(rinv9)*((rc2)*wk2[OPS_ACC5(0,0,-2)] -
      rc3*wk2[OPS_ACC5(0,0,-1)] + (rc3)*wk2[OPS_ACC5(0,0,1)] - rc2*wk2[OPS_ACC5(0,0,2)]) +
      rinv9*(-rc10*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(0,0,-2)] + (rc11)*u0[OPS_ACC1(0,0,-1)] +
      (rc11)*u0[OPS_ACC1(0,0,1)] - rc2*u0[OPS_ACC1(0,0,2)])) + rinv8*(-rc3*sqrt(rinv6)*((rc2)*wk4[OPS_ACC12(0,-2,0)] -
      rc3*wk4[OPS_ACC12(0,-1,0)] + (rc3)*wk4[OPS_ACC12(0,1,0)] - rc2*wk4[OPS_ACC12(0,2,0)]) +
      (rc11)*rinv7*(-rc10*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(-2,0,0)] + (rc11)*u0[OPS_ACC1(-1,0,0)] +
      (rc11)*u0[OPS_ACC1(1,0,0)] - rc2*u0[OPS_ACC1(2,0,0)]) - rc3*sqrt(rinv9)*((rc2)*wk2[OPS_ACC5(0,0,-2)] -
      rc3*wk2[OPS_ACC5(0,0,-1)] + (rc3)*wk2[OPS_ACC5(0,0,1)] - rc2*wk2[OPS_ACC5(0,0,2)])) -
      0.5*sqrt(rinv9)*((rc2)*rhou0[OPS_ACC13(0,0,-2)]*u2[OPS_ACC16(0,0,-2)] -
      rc3*rhou0[OPS_ACC13(0,0,-1)]*u2[OPS_ACC16(0,0,-1)] + (rc3)*rhou0[OPS_ACC13(0,0,1)]*u2[OPS_ACC16(0,0,1)] -
      rc2*rhou0[OPS_ACC13(0,0,2)]*u2[OPS_ACC16(0,0,2)]) - 0.5*sqrt(rinv9)*((rc2)*rhou0[OPS_ACC13(0,0,-2)] -
      rc3*rhou0[OPS_ACC13(0,0,-1)] + (rc3)*rhou0[OPS_ACC13(0,0,1)] - rc2*rhou0[OPS_ACC13(0,0,2)])*u2[OPS_ACC16(0,0,0)] -
      0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC8(0,0,0)] + wk7[OPS_ACC2(0,0,0)])*rhou0[OPS_ACC13(0,0,0)];
    wk11[OPS_ACC20(0,0,0)] = -0.5*sqrt(rinv6)*((rc2)*rhou1[OPS_ACC11(0,-2,0)]*u1[OPS_ACC15(0,-2,0)] -
      rc3*rhou1[OPS_ACC11(0,-1,0)]*u1[OPS_ACC15(0,-1,0)] + (rc3)*rhou1[OPS_ACC11(0,1,0)]*u1[OPS_ACC15(0,1,0)] -
      rc2*rhou1[OPS_ACC11(0,2,0)]*u1[OPS_ACC15(0,2,0)]) - sqrt(rinv6)*((rc2)*p[OPS_ACC3(0,-2,0)] -
      rc3*p[OPS_ACC3(0,-1,0)] + (rc3)*p[OPS_ACC3(0,1,0)] - rc2*p[OPS_ACC3(0,2,0)]) -
      0.5*sqrt(rinv6)*((rc2)*rhou1[OPS_ACC11(0,-2,0)] - rc3*rhou1[OPS_ACC11(0,-1,0)] + (rc3)*rhou1[OPS_ACC11(0,1,0)] -
      rc2*rhou1[OPS_ACC11(0,2,0)])*u1[OPS_ACC15(0,0,0)] -
      0.5*sqrt(rinv7)*((rc2)*rhou1[OPS_ACC11(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] -
      rc3*rhou1[OPS_ACC11(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhou1[OPS_ACC11(1,0,0)]*u0[OPS_ACC1(1,0,0)] -
      rc2*rhou1[OPS_ACC11(2,0,0)]*u0[OPS_ACC1(2,0,0)]) - 0.5*sqrt(rinv7)*((rc2)*rhou1[OPS_ACC11(-2,0,0)] -
      rc3*rhou1[OPS_ACC11(-1,0,0)] + (rc3)*rhou1[OPS_ACC11(1,0,0)] - rc2*rhou1[OPS_ACC11(2,0,0)])*u0[OPS_ACC1(0,0,0)] +
      rinv8*(sqrt(rinv6)*((rc2)*wk6[OPS_ACC8(0,-2,0)] - rc3*wk6[OPS_ACC8(0,-1,0)] + (rc3)*wk6[OPS_ACC8(0,1,0)] -
      rc2*wk6[OPS_ACC8(0,2,0)]) + rinv7*(-rc10*u1[OPS_ACC15(0,0,0)] - rc2*u1[OPS_ACC15(-2,0,0)] +
      (rc11)*u1[OPS_ACC15(-1,0,0)] + (rc11)*u1[OPS_ACC15(1,0,0)] - rc2*u1[OPS_ACC15(2,0,0)])) +
      rinv8*(sqrt(rinv9)*((rc2)*wk5[OPS_ACC7(0,0,-2)] - rc3*wk5[OPS_ACC7(0,0,-1)] + (rc3)*wk5[OPS_ACC7(0,0,1)] -
      rc2*wk5[OPS_ACC7(0,0,2)]) + rinv9*(-rc10*u1[OPS_ACC15(0,0,0)] - rc2*u1[OPS_ACC15(0,0,-2)] +
      (rc11)*u1[OPS_ACC15(0,0,-1)] + (rc11)*u1[OPS_ACC15(0,0,1)] - rc2*u1[OPS_ACC15(0,0,2)])) +
      rinv8*(-rc3*sqrt(rinv6)*((rc2)*wk6[OPS_ACC8(0,-2,0)] - rc3*wk6[OPS_ACC8(0,-1,0)] + (rc3)*wk6[OPS_ACC8(0,1,0)] -
      rc2*wk6[OPS_ACC8(0,2,0)]) + (rc11)*rinv6*(-rc10*u1[OPS_ACC15(0,0,0)] - rc2*u1[OPS_ACC15(0,-2,0)] +
      (rc11)*u1[OPS_ACC15(0,-1,0)] + (rc11)*u1[OPS_ACC15(0,1,0)] - rc2*u1[OPS_ACC15(0,2,0)]) -
      rc3*sqrt(rinv9)*((rc2)*wk5[OPS_ACC7(0,0,-2)] - rc3*wk5[OPS_ACC7(0,0,-1)] + (rc3)*wk5[OPS_ACC7(0,0,1)] -
      rc2*wk5[OPS_ACC7(0,0,2)])) - 0.5*sqrt(rinv9)*((rc2)*rhou1[OPS_ACC11(0,0,-2)]*u2[OPS_ACC16(0,0,-2)] -
      rc3*rhou1[OPS_ACC11(0,0,-1)]*u2[OPS_ACC16(0,0,-1)] + (rc3)*rhou1[OPS_ACC11(0,0,1)]*u2[OPS_ACC16(0,0,1)] -
      rc2*rhou1[OPS_ACC11(0,0,2)]*u2[OPS_ACC16(0,0,2)]) - 0.5*sqrt(rinv9)*((rc2)*rhou1[OPS_ACC11(0,0,-2)] -
      rc3*rhou1[OPS_ACC11(0,0,-1)] + (rc3)*rhou1[OPS_ACC11(0,0,1)] - rc2*rhou1[OPS_ACC11(0,0,2)])*u2[OPS_ACC16(0,0,0)] -
      0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC8(0,0,0)] + wk7[OPS_ACC2(0,0,0)])*rhou1[OPS_ACC11(0,0,0)];
    wk12[OPS_ACC21(0,0,0)] = -0.5*sqrt(rinv6)*((rc2)*rhou2[OPS_ACC10(0,-2,0)]*u1[OPS_ACC15(0,-2,0)] -
      rc3*rhou2[OPS_ACC10(0,-1,0)]*u1[OPS_ACC15(0,-1,0)] + (rc3)*rhou2[OPS_ACC10(0,1,0)]*u1[OPS_ACC15(0,1,0)] -
      rc2*rhou2[OPS_ACC10(0,2,0)]*u1[OPS_ACC15(0,2,0)]) - 0.5*sqrt(rinv6)*((rc2)*rhou2[OPS_ACC10(0,-2,0)] -
      rc3*rhou2[OPS_ACC10(0,-1,0)] + (rc3)*rhou2[OPS_ACC10(0,1,0)] - rc2*rhou2[OPS_ACC10(0,2,0)])*u1[OPS_ACC15(0,0,0)] -
      0.5*sqrt(rinv7)*((rc2)*rhou2[OPS_ACC10(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] -
      rc3*rhou2[OPS_ACC10(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhou2[OPS_ACC10(1,0,0)]*u0[OPS_ACC1(1,0,0)] -
      rc2*rhou2[OPS_ACC10(2,0,0)]*u0[OPS_ACC1(2,0,0)]) - 0.5*sqrt(rinv7)*((rc2)*rhou2[OPS_ACC10(-2,0,0)] -
      rc3*rhou2[OPS_ACC10(-1,0,0)] + (rc3)*rhou2[OPS_ACC10(1,0,0)] - rc2*rhou2[OPS_ACC10(2,0,0)])*u0[OPS_ACC1(0,0,0)] +
      rinv8*(rinv6*(-rc10*u2[OPS_ACC16(0,0,0)] - rc2*u2[OPS_ACC16(0,-2,0)] + (rc11)*u2[OPS_ACC16(0,-1,0)] +
      (rc11)*u2[OPS_ACC16(0,1,0)] - rc2*u2[OPS_ACC16(0,2,0)]) + sqrt(rinv9)*((rc2)*wk3[OPS_ACC0(0,0,-2)] -
      rc3*wk3[OPS_ACC0(0,0,-1)] + (rc3)*wk3[OPS_ACC0(0,0,1)] - rc2*wk3[OPS_ACC0(0,0,2)])) +
      rinv8*(rinv7*(-rc10*u2[OPS_ACC16(0,0,0)] - rc2*u2[OPS_ACC16(-2,0,0)] + (rc11)*u2[OPS_ACC16(-1,0,0)] +
      (rc11)*u2[OPS_ACC16(1,0,0)] - rc2*u2[OPS_ACC16(2,0,0)]) + sqrt(rinv9)*((rc2)*wk6[OPS_ACC8(0,0,-2)] -
      rc3*wk6[OPS_ACC8(0,0,-1)] + (rc3)*wk6[OPS_ACC8(0,0,1)] - rc2*wk6[OPS_ACC8(0,0,2)])) +
      rinv8*(-rc3*sqrt(rinv9)*((rc2)*wk3[OPS_ACC0(0,0,-2)] - rc3*wk3[OPS_ACC0(0,0,-1)] + (rc3)*wk3[OPS_ACC0(0,0,1)] -
      rc2*wk3[OPS_ACC0(0,0,2)]) - rc3*sqrt(rinv9)*((rc2)*wk6[OPS_ACC8(0,0,-2)] - rc3*wk6[OPS_ACC8(0,0,-1)] +
      (rc3)*wk6[OPS_ACC8(0,0,1)] - rc2*wk6[OPS_ACC8(0,0,2)]) + (rc11)*rinv9*(-rc10*u2[OPS_ACC16(0,0,0)] -
      rc2*u2[OPS_ACC16(0,0,-2)] + (rc11)*u2[OPS_ACC16(0,0,-1)] + (rc11)*u2[OPS_ACC16(0,0,1)] -
      rc2*u2[OPS_ACC16(0,0,2)])) - 0.5*sqrt(rinv9)*((rc2)*rhou2[OPS_ACC10(0,0,-2)]*u2[OPS_ACC16(0,0,-2)] -
      rc3*rhou2[OPS_ACC10(0,0,-1)]*u2[OPS_ACC16(0,0,-1)] + (rc3)*rhou2[OPS_ACC10(0,0,1)]*u2[OPS_ACC16(0,0,1)] -
      rc2*rhou2[OPS_ACC10(0,0,2)]*u2[OPS_ACC16(0,0,2)]) - sqrt(rinv9)*((rc2)*p[OPS_ACC3(0,0,-2)] -
      rc3*p[OPS_ACC3(0,0,-1)] + (rc3)*p[OPS_ACC3(0,0,1)] - rc2*p[OPS_ACC3(0,0,2)]) -
      0.5*sqrt(rinv9)*((rc2)*rhou2[OPS_ACC10(0,0,-2)] - rc3*rhou2[OPS_ACC10(0,0,-1)] + (rc3)*rhou2[OPS_ACC10(0,0,1)] -
      rc2*rhou2[OPS_ACC10(0,0,2)])*u2[OPS_ACC16(0,0,0)] - 0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC8(0,0,0)] +
      wk7[OPS_ACC2(0,0,0)])*rhou2[OPS_ACC10(0,0,0)];
    wk13[OPS_ACC22(0,0,0)] = rinv12*rinv13*rinv14*rinv6*rinv8*(-rc10*T[OPS_ACC18(0,0,0)] - rc2*T[OPS_ACC18(0,-2,0)] +
      (rc11)*T[OPS_ACC18(0,-1,0)] + (rc11)*T[OPS_ACC18(0,1,0)] - rc2*T[OPS_ACC18(0,2,0)]) +
      rinv12*rinv13*rinv14*rinv7*rinv8*(-rc10*T[OPS_ACC18(0,0,0)] - rc2*T[OPS_ACC18(-2,0,0)] +
      (rc11)*T[OPS_ACC18(-1,0,0)] + (rc11)*T[OPS_ACC18(1,0,0)] - rc2*T[OPS_ACC18(2,0,0)]) +
      rinv12*rinv13*rinv14*rinv8*rinv9*(-rc10*T[OPS_ACC18(0,0,0)] - rc2*T[OPS_ACC18(0,0,-2)] +
      (rc11)*T[OPS_ACC18(0,0,-1)] + (rc11)*T[OPS_ACC18(0,0,1)] - rc2*T[OPS_ACC18(0,0,2)]) -
      sqrt(rinv6)*((rc2)*p[OPS_ACC3(0,-2,0)]*u1[OPS_ACC15(0,-2,0)] - rc3*p[OPS_ACC3(0,-1,0)]*u1[OPS_ACC15(0,-1,0)] +
      (rc3)*p[OPS_ACC3(0,1,0)]*u1[OPS_ACC15(0,1,0)] - rc2*p[OPS_ACC3(0,2,0)]*u1[OPS_ACC15(0,2,0)]) -
      0.5*sqrt(rinv6)*((rc2)*rhoE[OPS_ACC14(0,-2,0)]*u1[OPS_ACC15(0,-2,0)] -
      rc3*rhoE[OPS_ACC14(0,-1,0)]*u1[OPS_ACC15(0,-1,0)] + (rc3)*rhoE[OPS_ACC14(0,1,0)]*u1[OPS_ACC15(0,1,0)] -
      rc2*rhoE[OPS_ACC14(0,2,0)]*u1[OPS_ACC15(0,2,0)]) - 0.5*sqrt(rinv6)*((rc2)*rhoE[OPS_ACC14(0,-2,0)] -
      rc3*rhoE[OPS_ACC14(0,-1,0)] + (rc3)*rhoE[OPS_ACC14(0,1,0)] - rc2*rhoE[OPS_ACC14(0,2,0)])*u1[OPS_ACC15(0,0,0)] -
      sqrt(rinv7)*((rc2)*p[OPS_ACC3(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] - rc3*p[OPS_ACC3(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] +
      (rc3)*p[OPS_ACC3(1,0,0)]*u0[OPS_ACC1(1,0,0)] - rc2*p[OPS_ACC3(2,0,0)]*u0[OPS_ACC1(2,0,0)]) -
      0.5*sqrt(rinv7)*((rc2)*rhoE[OPS_ACC14(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] -
      rc3*rhoE[OPS_ACC14(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhoE[OPS_ACC14(1,0,0)]*u0[OPS_ACC1(1,0,0)] -
      rc2*rhoE[OPS_ACC14(2,0,0)]*u0[OPS_ACC1(2,0,0)]) - 0.5*sqrt(rinv7)*((rc2)*rhoE[OPS_ACC14(-2,0,0)] -
      rc3*rhoE[OPS_ACC14(-1,0,0)] + (rc3)*rhoE[OPS_ACC14(1,0,0)] - rc2*rhoE[OPS_ACC14(2,0,0)])*u0[OPS_ACC1(0,0,0)] +
      rinv8*(sqrt(rinv6)*((rc2)*wk4[OPS_ACC12(0,-2,0)] - rc3*wk4[OPS_ACC12(0,-1,0)] + (rc3)*wk4[OPS_ACC12(0,1,0)] -
      rc2*wk4[OPS_ACC12(0,2,0)]) + rinv6*(-rc10*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(0,-2,0)] +
      (rc11)*u0[OPS_ACC1(0,-1,0)] + (rc11)*u0[OPS_ACC1(0,1,0)] - rc2*u0[OPS_ACC1(0,2,0)]))*u0[OPS_ACC1(0,0,0)] +
      rinv8*(sqrt(rinv6)*((rc2)*wk6[OPS_ACC8(0,-2,0)] - rc3*wk6[OPS_ACC8(0,-1,0)] + (rc3)*wk6[OPS_ACC8(0,1,0)] -
      rc2*wk6[OPS_ACC8(0,2,0)]) + rinv7*(-rc10*u1[OPS_ACC15(0,0,0)] - rc2*u1[OPS_ACC15(-2,0,0)] +
      (rc11)*u1[OPS_ACC15(-1,0,0)] + (rc11)*u1[OPS_ACC15(1,0,0)] - rc2*u1[OPS_ACC15(2,0,0)]))*u1[OPS_ACC15(0,0,0)] +
      rinv8*(rinv6*(-rc10*u2[OPS_ACC16(0,0,0)] - rc2*u2[OPS_ACC16(0,-2,0)] + (rc11)*u2[OPS_ACC16(0,-1,0)] +
      (rc11)*u2[OPS_ACC16(0,1,0)] - rc2*u2[OPS_ACC16(0,2,0)]) + sqrt(rinv9)*((rc2)*wk3[OPS_ACC0(0,0,-2)] -
      rc3*wk3[OPS_ACC0(0,0,-1)] + (rc3)*wk3[OPS_ACC0(0,0,1)] - rc2*wk3[OPS_ACC0(0,0,2)]))*u2[OPS_ACC16(0,0,0)] +
      rinv8*(rinv7*(-rc10*u2[OPS_ACC16(0,0,0)] - rc2*u2[OPS_ACC16(-2,0,0)] + (rc11)*u2[OPS_ACC16(-1,0,0)] +
      (rc11)*u2[OPS_ACC16(1,0,0)] - rc2*u2[OPS_ACC16(2,0,0)]) + sqrt(rinv9)*((rc2)*wk6[OPS_ACC8(0,0,-2)] -
      rc3*wk6[OPS_ACC8(0,0,-1)] + (rc3)*wk6[OPS_ACC8(0,0,1)] - rc2*wk6[OPS_ACC8(0,0,2)]))*u2[OPS_ACC16(0,0,0)] +
      rinv8*(sqrt(rinv9)*((rc2)*wk2[OPS_ACC5(0,0,-2)] - rc3*wk2[OPS_ACC5(0,0,-1)] + (rc3)*wk2[OPS_ACC5(0,0,1)] -
      rc2*wk2[OPS_ACC5(0,0,2)]) + rinv9*(-rc10*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(0,0,-2)] +
      (rc11)*u0[OPS_ACC1(0,0,-1)] + (rc11)*u0[OPS_ACC1(0,0,1)] - rc2*u0[OPS_ACC1(0,0,2)]))*u0[OPS_ACC1(0,0,0)] +
      rinv8*(sqrt(rinv9)*((rc2)*wk5[OPS_ACC7(0,0,-2)] - rc3*wk5[OPS_ACC7(0,0,-1)] + (rc3)*wk5[OPS_ACC7(0,0,1)] -
      rc2*wk5[OPS_ACC7(0,0,2)]) + rinv9*(-rc10*u1[OPS_ACC15(0,0,0)] - rc2*u1[OPS_ACC15(0,0,-2)] +
      (rc11)*u1[OPS_ACC15(0,0,-1)] + (rc11)*u1[OPS_ACC15(0,0,1)] - rc2*u1[OPS_ACC15(0,0,2)]))*u1[OPS_ACC15(0,0,0)] +
      rinv8*(wk0[OPS_ACC17(0,0,0)] + wk2[OPS_ACC5(0,0,0)])*wk0[OPS_ACC17(0,0,0)] + rinv8*(wk0[OPS_ACC17(0,0,0)] +
      wk2[OPS_ACC5(0,0,0)])*wk2[OPS_ACC5(0,0,0)] + rinv8*(wk1[OPS_ACC4(0,0,0)] +
      wk4[OPS_ACC12(0,0,0)])*wk1[OPS_ACC4(0,0,0)] + rinv8*(wk1[OPS_ACC4(0,0,0)] +
      wk4[OPS_ACC12(0,0,0)])*wk4[OPS_ACC12(0,0,0)] + rinv8*(wk5[OPS_ACC7(0,0,0)] +
      wk8[OPS_ACC6(0,0,0)])*wk5[OPS_ACC7(0,0,0)] + rinv8*(wk5[OPS_ACC7(0,0,0)] +
      wk8[OPS_ACC6(0,0,0)])*wk8[OPS_ACC6(0,0,0)] + rinv8*(-rc3*sqrt(rinv6)*((rc2)*wk4[OPS_ACC12(0,-2,0)] -
      rc3*wk4[OPS_ACC12(0,-1,0)] + (rc3)*wk4[OPS_ACC12(0,1,0)] - rc2*wk4[OPS_ACC12(0,2,0)]) +
      (rc11)*rinv7*(-rc10*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(-2,0,0)] + (rc11)*u0[OPS_ACC1(-1,0,0)] +
      (rc11)*u0[OPS_ACC1(1,0,0)] - rc2*u0[OPS_ACC1(2,0,0)]) - rc3*sqrt(rinv9)*((rc2)*wk2[OPS_ACC5(0,0,-2)] -
      rc3*wk2[OPS_ACC5(0,0,-1)] + (rc3)*wk2[OPS_ACC5(0,0,1)] - rc2*wk2[OPS_ACC5(0,0,2)]))*u0[OPS_ACC1(0,0,0)] +
      rinv8*(-rc3*sqrt(rinv6)*((rc2)*wk6[OPS_ACC8(0,-2,0)] - rc3*wk6[OPS_ACC8(0,-1,0)] + (rc3)*wk6[OPS_ACC8(0,1,0)] -
      rc2*wk6[OPS_ACC8(0,2,0)]) + (rc11)*rinv6*(-rc10*u1[OPS_ACC15(0,0,0)] - rc2*u1[OPS_ACC15(0,-2,0)] +
      (rc11)*u1[OPS_ACC15(0,-1,0)] + (rc11)*u1[OPS_ACC15(0,1,0)] - rc2*u1[OPS_ACC15(0,2,0)]) -
      rc3*sqrt(rinv9)*((rc2)*wk5[OPS_ACC7(0,0,-2)] - rc3*wk5[OPS_ACC7(0,0,-1)] + (rc3)*wk5[OPS_ACC7(0,0,1)] -
      rc2*wk5[OPS_ACC7(0,0,2)]))*u1[OPS_ACC15(0,0,0)] + rinv8*(-rc3*sqrt(rinv9)*((rc2)*wk3[OPS_ACC0(0,0,-2)] -
      rc3*wk3[OPS_ACC0(0,0,-1)] + (rc3)*wk3[OPS_ACC0(0,0,1)] - rc2*wk3[OPS_ACC0(0,0,2)]) -
      rc3*sqrt(rinv9)*((rc2)*wk6[OPS_ACC8(0,0,-2)] - rc3*wk6[OPS_ACC8(0,0,-1)] + (rc3)*wk6[OPS_ACC8(0,0,1)] -
      rc2*wk6[OPS_ACC8(0,0,2)]) + (rc11)*rinv9*(-rc10*u2[OPS_ACC16(0,0,0)] - rc2*u2[OPS_ACC16(0,0,-2)] +
      (rc11)*u2[OPS_ACC16(0,0,-1)] + (rc11)*u2[OPS_ACC16(0,0,1)] - rc2*u2[OPS_ACC16(0,0,2)]))*u2[OPS_ACC16(0,0,0)] +
      rinv8*(-rc3*wk3[OPS_ACC0(0,0,0)] - rc3*wk6[OPS_ACC8(0,0,0)] + (rc11)*wk7[OPS_ACC2(0,0,0)])*wk7[OPS_ACC2(0,0,0)] +
      rinv8*(-rc3*wk3[OPS_ACC0(0,0,0)] + (rc11)*wk6[OPS_ACC8(0,0,0)] - rc3*wk7[OPS_ACC2(0,0,0)])*wk6[OPS_ACC8(0,0,0)] +
      rinv8*((rc11)*wk3[OPS_ACC0(0,0,0)] - rc3*wk6[OPS_ACC8(0,0,0)] - rc3*wk7[OPS_ACC2(0,0,0)])*wk3[OPS_ACC0(0,0,0)] -
      sqrt(rinv9)*((rc2)*p[OPS_ACC3(0,0,-2)]*u2[OPS_ACC16(0,0,-2)] - rc3*p[OPS_ACC3(0,0,-1)]*u2[OPS_ACC16(0,0,-1)] +
      (rc3)*p[OPS_ACC3(0,0,1)]*u2[OPS_ACC16(0,0,1)] - rc2*p[OPS_ACC3(0,0,2)]*u2[OPS_ACC16(0,0,2)]) -
      0.5*sqrt(rinv9)*((rc2)*rhoE[OPS_ACC14(0,0,-2)]*u2[OPS_ACC16(0,0,-2)] -
      rc3*rhoE[OPS_ACC14(0,0,-1)]*u2[OPS_ACC16(0,0,-1)] + (rc3)*rhoE[OPS_ACC14(0,0,1)]*u2[OPS_ACC16(0,0,1)] -
      rc2*rhoE[OPS_ACC14(0,0,2)]*u2[OPS_ACC16(0,0,2)]) - 0.5*sqrt(rinv9)*((rc2)*rhoE[OPS_ACC14(0,0,-2)] -
      rc3*rhoE[OPS_ACC14(0,0,-1)] + (rc3)*rhoE[OPS_ACC14(0,0,1)] - rc2*rhoE[OPS_ACC14(0,0,2)])*u2[OPS_ACC16(0,0,0)] -
      0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC8(0,0,0)] + wk7[OPS_ACC2(0,0,0)])*rhoE[OPS_ACC14(0,0,0)];
}



#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6
#undef OPS_ACC7
#undef OPS_ACC8
#undef OPS_ACC9
#undef OPS_ACC10
#undef OPS_ACC11
#undef OPS_ACC12
#undef OPS_ACC13
#undef OPS_ACC14
#undef OPS_ACC15
#undef OPS_ACC16
#undef OPS_ACC17
#undef OPS_ACC18
#undef OPS_ACC19
#undef OPS_ACC20
#undef OPS_ACC21
#undef OPS_ACC22
#undef OPS_ACC23


__global__ void ops_taylor_green_vortex_block0_10_kernel(
const double* __restrict arg0,
const double* __restrict arg1,
const double* __restrict arg2,
const double* __restrict arg3,
const double* __restrict arg4,
const double* __restrict arg5,
const double* __restrict arg6,
const double* __restrict arg7,
const double* __restrict arg8,
const double* __restrict arg9,
const double* __restrict arg10,
const double* __restrict arg11,
const double* __restrict arg12,
const double* __restrict arg13,
const double* __restrict arg14,
const double* __restrict arg15,
const double* __restrict arg16,
const double* __restrict arg17,
const double* __restrict arg18,
double* __restrict arg19,
double* __restrict arg20,
double* __restrict arg21,
double* __restrict arg22,
double* __restrict arg23,
int size0,
int size1,
int size2 ){


  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * xdim0_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim0_taylor_green_vortex_block0_10_kernel * ydim0_taylor_green_vortex_block0_10_kernel;
  arg1 += idx_x * 1*1 + idx_y * 1*1 * xdim1_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim1_taylor_green_vortex_block0_10_kernel * ydim1_taylor_green_vortex_block0_10_kernel;
  arg2 += idx_x * 1*1 + idx_y * 1*1 * xdim2_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim2_taylor_green_vortex_block0_10_kernel * ydim2_taylor_green_vortex_block0_10_kernel;
  arg3 += idx_x * 1*1 + idx_y * 1*1 * xdim3_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim3_taylor_green_vortex_block0_10_kernel * ydim3_taylor_green_vortex_block0_10_kernel;
  arg4 += idx_x * 1*1 + idx_y * 1*1 * xdim4_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim4_taylor_green_vortex_block0_10_kernel * ydim4_taylor_green_vortex_block0_10_kernel;
  arg5 += idx_x * 1*1 + idx_y * 1*1 * xdim5_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim5_taylor_green_vortex_block0_10_kernel * ydim5_taylor_green_vortex_block0_10_kernel;
  arg6 += idx_x * 1*1 + idx_y * 1*1 * xdim6_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim6_taylor_green_vortex_block0_10_kernel * ydim6_taylor_green_vortex_block0_10_kernel;
  arg7 += idx_x * 1*1 + idx_y * 1*1 * xdim7_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim7_taylor_green_vortex_block0_10_kernel * ydim7_taylor_green_vortex_block0_10_kernel;
  arg8 += idx_x * 1*1 + idx_y * 1*1 * xdim8_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim8_taylor_green_vortex_block0_10_kernel * ydim8_taylor_green_vortex_block0_10_kernel;
  arg9 += idx_x * 1*1 + idx_y * 1*1 * xdim9_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim9_taylor_green_vortex_block0_10_kernel * ydim9_taylor_green_vortex_block0_10_kernel;
  arg10 += idx_x * 1*1 + idx_y * 1*1 * xdim10_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim10_taylor_green_vortex_block0_10_kernel * ydim10_taylor_green_vortex_block0_10_kernel;
  arg11 += idx_x * 1*1 + idx_y * 1*1 * xdim11_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim11_taylor_green_vortex_block0_10_kernel * ydim11_taylor_green_vortex_block0_10_kernel;
  arg12 += idx_x * 1*1 + idx_y * 1*1 * xdim12_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim12_taylor_green_vortex_block0_10_kernel * ydim12_taylor_green_vortex_block0_10_kernel;
  arg13 += idx_x * 1*1 + idx_y * 1*1 * xdim13_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim13_taylor_green_vortex_block0_10_kernel * ydim13_taylor_green_vortex_block0_10_kernel;
  arg14 += idx_x * 1*1 + idx_y * 1*1 * xdim14_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim14_taylor_green_vortex_block0_10_kernel * ydim14_taylor_green_vortex_block0_10_kernel;
  arg15 += idx_x * 1*1 + idx_y * 1*1 * xdim15_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim15_taylor_green_vortex_block0_10_kernel * ydim15_taylor_green_vortex_block0_10_kernel;
  arg16 += idx_x * 1*1 + idx_y * 1*1 * xdim16_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim16_taylor_green_vortex_block0_10_kernel * ydim16_taylor_green_vortex_block0_10_kernel;
  arg17 += idx_x * 1*1 + idx_y * 1*1 * xdim17_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim17_taylor_green_vortex_block0_10_kernel * ydim17_taylor_green_vortex_block0_10_kernel;
  arg18 += idx_x * 1*1 + idx_y * 1*1 * xdim18_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim18_taylor_green_vortex_block0_10_kernel * ydim18_taylor_green_vortex_block0_10_kernel;
  arg19 += idx_x * 1*1 + idx_y * 1*1 * xdim19_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim19_taylor_green_vortex_block0_10_kernel * ydim19_taylor_green_vortex_block0_10_kernel;
  arg20 += idx_x * 1*1 + idx_y * 1*1 * xdim20_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim20_taylor_green_vortex_block0_10_kernel * ydim20_taylor_green_vortex_block0_10_kernel;
  arg21 += idx_x * 1*1 + idx_y * 1*1 * xdim21_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim21_taylor_green_vortex_block0_10_kernel * ydim21_taylor_green_vortex_block0_10_kernel;
  arg22 += idx_x * 1*1 + idx_y * 1*1 * xdim22_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim22_taylor_green_vortex_block0_10_kernel * ydim22_taylor_green_vortex_block0_10_kernel;
  arg23 += idx_x * 1*1 + idx_y * 1*1 * xdim23_taylor_green_vortex_block0_10_kernel + idx_z * 1*1 * xdim23_taylor_green_vortex_block0_10_kernel * ydim23_taylor_green_vortex_block0_10_kernel;

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    taylor_green_vortex_block0_10_kernel_gpu(arg0, arg1, arg2, arg3,
                   arg4, arg5, arg6, arg7, arg8,
                   arg9, arg10, arg11, arg12, arg13,
                   arg14, arg15, arg16, arg17, arg18,
                   arg19, arg20, arg21, arg22, arg23);
  }

}

// host stub function
// host stub function
void ops_par_loop_taylor_green_vortex_block0_10_kernel_execute(ops_kernel_descriptor *desc) {
  #ifdef OPS_MPI
  ops_block block = desc->block;
  #endif
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  ops_arg arg23 = desc->args[23];

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[24] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,24,range,18)) return;
  #endif

  if (OPS_diags > 1) {
    ops_timing_realloc(18,"taylor_green_vortex_block0_10_kernel");
    OPS_kernels[18].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }


  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];
  int xdim8 = args[8].dat->size[0];
  int ydim8 = args[8].dat->size[1];
  int xdim9 = args[9].dat->size[0];
  int ydim9 = args[9].dat->size[1];
  int xdim10 = args[10].dat->size[0];
  int ydim10 = args[10].dat->size[1];
  int xdim11 = args[11].dat->size[0];
  int ydim11 = args[11].dat->size[1];
  int xdim12 = args[12].dat->size[0];
  int ydim12 = args[12].dat->size[1];
  int xdim13 = args[13].dat->size[0];
  int ydim13 = args[13].dat->size[1];
  int xdim14 = args[14].dat->size[0];
  int ydim14 = args[14].dat->size[1];
  int xdim15 = args[15].dat->size[0];
  int ydim15 = args[15].dat->size[1];
  int xdim16 = args[16].dat->size[0];
  int ydim16 = args[16].dat->size[1];
  int xdim17 = args[17].dat->size[0];
  int ydim17 = args[17].dat->size[1];
  int xdim18 = args[18].dat->size[0];
  int ydim18 = args[18].dat->size[1];
  int xdim19 = args[19].dat->size[0];
  int ydim19 = args[19].dat->size[1];
  int xdim20 = args[20].dat->size[0];
  int ydim20 = args[20].dat->size[1];
  int xdim21 = args[21].dat->size[0];
  int ydim21 = args[21].dat->size[1];
  int xdim22 = args[22].dat->size[0];
  int ydim22 = args[22].dat->size[1];
  int xdim23 = args[23].dat->size[0];
  int ydim23 = args[23].dat->size[1];

  if (xdim0 != xdim0_taylor_green_vortex_block0_10_kernel_h || ydim0 != ydim0_taylor_green_vortex_block0_10_kernel_h || xdim1 != xdim1_taylor_green_vortex_block0_10_kernel_h || ydim1 != ydim1_taylor_green_vortex_block0_10_kernel_h || xdim2 != xdim2_taylor_green_vortex_block0_10_kernel_h || ydim2 != ydim2_taylor_green_vortex_block0_10_kernel_h || xdim3 != xdim3_taylor_green_vortex_block0_10_kernel_h || ydim3 != ydim3_taylor_green_vortex_block0_10_kernel_h || xdim4 != xdim4_taylor_green_vortex_block0_10_kernel_h || ydim4 != ydim4_taylor_green_vortex_block0_10_kernel_h || xdim5 != xdim5_taylor_green_vortex_block0_10_kernel_h || ydim5 != ydim5_taylor_green_vortex_block0_10_kernel_h || xdim6 != xdim6_taylor_green_vortex_block0_10_kernel_h || ydim6 != ydim6_taylor_green_vortex_block0_10_kernel_h || xdim7 != xdim7_taylor_green_vortex_block0_10_kernel_h || ydim7 != ydim7_taylor_green_vortex_block0_10_kernel_h || xdim8 != xdim8_taylor_green_vortex_block0_10_kernel_h || ydim8 != ydim8_taylor_green_vortex_block0_10_kernel_h || xdim9 != xdim9_taylor_green_vortex_block0_10_kernel_h || ydim9 != ydim9_taylor_green_vortex_block0_10_kernel_h || xdim10 != xdim10_taylor_green_vortex_block0_10_kernel_h || ydim10 != ydim10_taylor_green_vortex_block0_10_kernel_h || xdim11 != xdim11_taylor_green_vortex_block0_10_kernel_h || ydim11 != ydim11_taylor_green_vortex_block0_10_kernel_h || xdim12 != xdim12_taylor_green_vortex_block0_10_kernel_h || ydim12 != ydim12_taylor_green_vortex_block0_10_kernel_h || xdim13 != xdim13_taylor_green_vortex_block0_10_kernel_h || ydim13 != ydim13_taylor_green_vortex_block0_10_kernel_h || xdim14 != xdim14_taylor_green_vortex_block0_10_kernel_h || ydim14 != ydim14_taylor_green_vortex_block0_10_kernel_h || xdim15 != xdim15_taylor_green_vortex_block0_10_kernel_h || ydim15 != ydim15_taylor_green_vortex_block0_10_kernel_h || xdim16 != xdim16_taylor_green_vortex_block0_10_kernel_h || ydim16 != ydim16_taylor_green_vortex_block0_10_kernel_h || xdim17 != xdim17_taylor_green_vortex_block0_10_kernel_h || ydim17 != ydim17_taylor_green_vortex_block0_10_kernel_h || xdim18 != xdim18_taylor_green_vortex_block0_10_kernel_h || ydim18 != ydim18_taylor_green_vortex_block0_10_kernel_h || xdim19 != xdim19_taylor_green_vortex_block0_10_kernel_h || ydim19 != ydim19_taylor_green_vortex_block0_10_kernel_h || xdim20 != xdim20_taylor_green_vortex_block0_10_kernel_h || ydim20 != ydim20_taylor_green_vortex_block0_10_kernel_h || xdim21 != xdim21_taylor_green_vortex_block0_10_kernel_h || ydim21 != ydim21_taylor_green_vortex_block0_10_kernel_h || xdim22 != xdim22_taylor_green_vortex_block0_10_kernel_h || ydim22 != ydim22_taylor_green_vortex_block0_10_kernel_h || xdim23 != xdim23_taylor_green_vortex_block0_10_kernel_h || ydim23 != ydim23_taylor_green_vortex_block0_10_kernel_h) {
    cudaMemcpyToSymbolAsync( xdim0_taylor_green_vortex_block0_10_kernel, &xdim0, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim0_taylor_green_vortex_block0_10_kernel_h = xdim0;
    cudaMemcpyToSymbolAsync( ydim0_taylor_green_vortex_block0_10_kernel, &ydim0, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim0_taylor_green_vortex_block0_10_kernel_h = ydim0;
    cudaMemcpyToSymbolAsync( xdim1_taylor_green_vortex_block0_10_kernel, &xdim1, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim1_taylor_green_vortex_block0_10_kernel_h = xdim1;
    cudaMemcpyToSymbolAsync( ydim1_taylor_green_vortex_block0_10_kernel, &ydim1, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim1_taylor_green_vortex_block0_10_kernel_h = ydim1;
    cudaMemcpyToSymbolAsync( xdim2_taylor_green_vortex_block0_10_kernel, &xdim2, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim2_taylor_green_vortex_block0_10_kernel_h = xdim2;
    cudaMemcpyToSymbolAsync( ydim2_taylor_green_vortex_block0_10_kernel, &ydim2, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim2_taylor_green_vortex_block0_10_kernel_h = ydim2;
    cudaMemcpyToSymbolAsync( xdim3_taylor_green_vortex_block0_10_kernel, &xdim3, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim3_taylor_green_vortex_block0_10_kernel_h = xdim3;
    cudaMemcpyToSymbolAsync( ydim3_taylor_green_vortex_block0_10_kernel, &ydim3, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim3_taylor_green_vortex_block0_10_kernel_h = ydim3;
    cudaMemcpyToSymbolAsync( xdim4_taylor_green_vortex_block0_10_kernel, &xdim4, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim4_taylor_green_vortex_block0_10_kernel_h = xdim4;
    cudaMemcpyToSymbolAsync( ydim4_taylor_green_vortex_block0_10_kernel, &ydim4, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim4_taylor_green_vortex_block0_10_kernel_h = ydim4;
    cudaMemcpyToSymbolAsync( xdim5_taylor_green_vortex_block0_10_kernel, &xdim5, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim5_taylor_green_vortex_block0_10_kernel_h = xdim5;
    cudaMemcpyToSymbolAsync( ydim5_taylor_green_vortex_block0_10_kernel, &ydim5, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim5_taylor_green_vortex_block0_10_kernel_h = ydim5;
    cudaMemcpyToSymbolAsync( xdim6_taylor_green_vortex_block0_10_kernel, &xdim6, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim6_taylor_green_vortex_block0_10_kernel_h = xdim6;
    cudaMemcpyToSymbolAsync( ydim6_taylor_green_vortex_block0_10_kernel, &ydim6, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim6_taylor_green_vortex_block0_10_kernel_h = ydim6;
    cudaMemcpyToSymbolAsync( xdim7_taylor_green_vortex_block0_10_kernel, &xdim7, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim7_taylor_green_vortex_block0_10_kernel_h = xdim7;
    cudaMemcpyToSymbolAsync( ydim7_taylor_green_vortex_block0_10_kernel, &ydim7, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim7_taylor_green_vortex_block0_10_kernel_h = ydim7;
    cudaMemcpyToSymbolAsync( xdim8_taylor_green_vortex_block0_10_kernel, &xdim8, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim8_taylor_green_vortex_block0_10_kernel_h = xdim8;
    cudaMemcpyToSymbolAsync( ydim8_taylor_green_vortex_block0_10_kernel, &ydim8, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim8_taylor_green_vortex_block0_10_kernel_h = ydim8;
    cudaMemcpyToSymbolAsync( xdim9_taylor_green_vortex_block0_10_kernel, &xdim9, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim9_taylor_green_vortex_block0_10_kernel_h = xdim9;
    cudaMemcpyToSymbolAsync( ydim9_taylor_green_vortex_block0_10_kernel, &ydim9, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim9_taylor_green_vortex_block0_10_kernel_h = ydim9;
    cudaMemcpyToSymbolAsync( xdim10_taylor_green_vortex_block0_10_kernel, &xdim10, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim10_taylor_green_vortex_block0_10_kernel_h = xdim10;
    cudaMemcpyToSymbolAsync( ydim10_taylor_green_vortex_block0_10_kernel, &ydim10, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim10_taylor_green_vortex_block0_10_kernel_h = ydim10;
    cudaMemcpyToSymbolAsync( xdim11_taylor_green_vortex_block0_10_kernel, &xdim11, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim11_taylor_green_vortex_block0_10_kernel_h = xdim11;
    cudaMemcpyToSymbolAsync( ydim11_taylor_green_vortex_block0_10_kernel, &ydim11, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim11_taylor_green_vortex_block0_10_kernel_h = ydim11;
    cudaMemcpyToSymbolAsync( xdim12_taylor_green_vortex_block0_10_kernel, &xdim12, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim12_taylor_green_vortex_block0_10_kernel_h = xdim12;
    cudaMemcpyToSymbolAsync( ydim12_taylor_green_vortex_block0_10_kernel, &ydim12, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim12_taylor_green_vortex_block0_10_kernel_h = ydim12;
    cudaMemcpyToSymbolAsync( xdim13_taylor_green_vortex_block0_10_kernel, &xdim13, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim13_taylor_green_vortex_block0_10_kernel_h = xdim13;
    cudaMemcpyToSymbolAsync( ydim13_taylor_green_vortex_block0_10_kernel, &ydim13, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim13_taylor_green_vortex_block0_10_kernel_h = ydim13;
    cudaMemcpyToSymbolAsync( xdim14_taylor_green_vortex_block0_10_kernel, &xdim14, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim14_taylor_green_vortex_block0_10_kernel_h = xdim14;
    cudaMemcpyToSymbolAsync( ydim14_taylor_green_vortex_block0_10_kernel, &ydim14, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim14_taylor_green_vortex_block0_10_kernel_h = ydim14;
    cudaMemcpyToSymbolAsync( xdim15_taylor_green_vortex_block0_10_kernel, &xdim15, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim15_taylor_green_vortex_block0_10_kernel_h = xdim15;
    cudaMemcpyToSymbolAsync( ydim15_taylor_green_vortex_block0_10_kernel, &ydim15, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim15_taylor_green_vortex_block0_10_kernel_h = ydim15;
    cudaMemcpyToSymbolAsync( xdim16_taylor_green_vortex_block0_10_kernel, &xdim16, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim16_taylor_green_vortex_block0_10_kernel_h = xdim16;
    cudaMemcpyToSymbolAsync( ydim16_taylor_green_vortex_block0_10_kernel, &ydim16, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim16_taylor_green_vortex_block0_10_kernel_h = ydim16;
    cudaMemcpyToSymbolAsync( xdim17_taylor_green_vortex_block0_10_kernel, &xdim17, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim17_taylor_green_vortex_block0_10_kernel_h = xdim17;
    cudaMemcpyToSymbolAsync( ydim17_taylor_green_vortex_block0_10_kernel, &ydim17, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim17_taylor_green_vortex_block0_10_kernel_h = ydim17;
    cudaMemcpyToSymbolAsync( xdim18_taylor_green_vortex_block0_10_kernel, &xdim18, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim18_taylor_green_vortex_block0_10_kernel_h = xdim18;
    cudaMemcpyToSymbolAsync( ydim18_taylor_green_vortex_block0_10_kernel, &ydim18, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim18_taylor_green_vortex_block0_10_kernel_h = ydim18;
    cudaMemcpyToSymbolAsync( xdim19_taylor_green_vortex_block0_10_kernel, &xdim19, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim19_taylor_green_vortex_block0_10_kernel_h = xdim19;
    cudaMemcpyToSymbolAsync( ydim19_taylor_green_vortex_block0_10_kernel, &ydim19, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim19_taylor_green_vortex_block0_10_kernel_h = ydim19;
    cudaMemcpyToSymbolAsync( xdim20_taylor_green_vortex_block0_10_kernel, &xdim20, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim20_taylor_green_vortex_block0_10_kernel_h = xdim20;
    cudaMemcpyToSymbolAsync( ydim20_taylor_green_vortex_block0_10_kernel, &ydim20, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim20_taylor_green_vortex_block0_10_kernel_h = ydim20;
    cudaMemcpyToSymbolAsync( xdim21_taylor_green_vortex_block0_10_kernel, &xdim21, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim21_taylor_green_vortex_block0_10_kernel_h = xdim21;
    cudaMemcpyToSymbolAsync( ydim21_taylor_green_vortex_block0_10_kernel, &ydim21, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim21_taylor_green_vortex_block0_10_kernel_h = ydim21;
    cudaMemcpyToSymbolAsync( xdim22_taylor_green_vortex_block0_10_kernel, &xdim22, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim22_taylor_green_vortex_block0_10_kernel_h = xdim22;
    cudaMemcpyToSymbolAsync( ydim22_taylor_green_vortex_block0_10_kernel, &ydim22, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim22_taylor_green_vortex_block0_10_kernel_h = ydim22;
    cudaMemcpyToSymbolAsync( xdim23_taylor_green_vortex_block0_10_kernel, &xdim23, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    xdim23_taylor_green_vortex_block0_10_kernel_h = xdim23;
    cudaMemcpyToSymbolAsync( ydim23_taylor_green_vortex_block0_10_kernel, &ydim23, sizeof(int),0,cudaMemcpyHostToDevice,stream );
    ydim23_taylor_green_vortex_block0_10_kernel_h = ydim23;
  }



  dim3 grid( (x_size-1)/OPS_block_size_x+ 1, (y_size-1)/OPS_block_size_y + 1, z_size);
  dim3 tblock(OPS_block_size_x,OPS_block_size_y,1);




  char *p_a[24];
  int dat0 = args[0].dat->elem_size;
  int dat1 = args[1].dat->elem_size;
  int dat2 = args[2].dat->elem_size;
  int dat3 = args[3].dat->elem_size;
  int dat4 = args[4].dat->elem_size;
  int dat5 = args[5].dat->elem_size;
  int dat6 = args[6].dat->elem_size;
  int dat7 = args[7].dat->elem_size;
  int dat8 = args[8].dat->elem_size;
  int dat9 = args[9].dat->elem_size;
  int dat10 = args[10].dat->elem_size;
  int dat11 = args[11].dat->elem_size;
  int dat12 = args[12].dat->elem_size;
  int dat13 = args[13].dat->elem_size;
  int dat14 = args[14].dat->elem_size;
  int dat15 = args[15].dat->elem_size;
  int dat16 = args[16].dat->elem_size;
  int dat17 = args[17].dat->elem_size;
  int dat18 = args[18].dat->elem_size;
  int dat19 = args[19].dat->elem_size;
  int dat20 = args[20].dat->elem_size;
  int dat21 = args[21].dat->elem_size;
  int dat22 = args[22].dat->elem_size;
  int dat23 = args[23].dat->elem_size;

  //set up initial pointers
  int base0 = args[0].dat->base_offset;
  base0 += dat0 * (start[0] * args[0].stencil->stride[0]);
  base0 += dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 += dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].dat->data_d + base0;

  int base1 = args[1].dat->base_offset;
  base1 += dat1 * (start[0] * args[1].stencil->stride[0]);
  base1 += dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 += dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].dat->data_d + base1;

  int base2 = args[2].dat->base_offset;
  base2 += dat2 * (start[0] * args[2].stencil->stride[0]);
  base2 += dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 += dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].dat->data_d + base2;

  int base3 = args[3].dat->base_offset;
  base3 += dat3 * (start[0] * args[3].stencil->stride[0]);
  base3 += dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 += dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].dat->data_d + base3;

  int base4 = args[4].dat->base_offset;
  base4 += dat4 * (start[0] * args[4].stencil->stride[0]);
  base4 += dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 += dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].dat->data_d + base4;

  int base5 = args[5].dat->base_offset;
  base5 += dat5 * (start[0] * args[5].stencil->stride[0]);
  base5 += dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  base5 += dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2]);
  p_a[5] = (char *)args[5].dat->data_d + base5;

  int base6 = args[6].dat->base_offset;
  base6 += dat6 * (start[0] * args[6].stencil->stride[0]);
  base6 += dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  base6 += dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2]);
  p_a[6] = (char *)args[6].dat->data_d + base6;

  int base7 = args[7].dat->base_offset;
  base7 += dat7 * (start[0] * args[7].stencil->stride[0]);
  base7 += dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  base7 += dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2]);
  p_a[7] = (char *)args[7].dat->data_d + base7;

  int base8 = args[8].dat->base_offset;
  base8 += dat8 * (start[0] * args[8].stencil->stride[0]);
  base8 += dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1]);
  base8 += dat8 *
    args[8].dat->size[0] *
    args[8].dat->size[1] *
    (start[2] * args[8].stencil->stride[2]);
  p_a[8] = (char *)args[8].dat->data_d + base8;

  int base9 = args[9].dat->base_offset;
  base9 += dat9 * (start[0] * args[9].stencil->stride[0]);
  base9 += dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  base9 += dat9 *
    args[9].dat->size[0] *
    args[9].dat->size[1] *
    (start[2] * args[9].stencil->stride[2]);
  p_a[9] = (char *)args[9].dat->data_d + base9;

  int base10 = args[10].dat->base_offset;
  base10 += dat10 * (start[0] * args[10].stencil->stride[0]);
  base10 += dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1]);
  base10 += dat10 *
    args[10].dat->size[0] *
    args[10].dat->size[1] *
    (start[2] * args[10].stencil->stride[2]);
  p_a[10] = (char *)args[10].dat->data_d + base10;

  int base11 = args[11].dat->base_offset;
  base11 += dat11 * (start[0] * args[11].stencil->stride[0]);
  base11 += dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1]);
  base11 += dat11 *
    args[11].dat->size[0] *
    args[11].dat->size[1] *
    (start[2] * args[11].stencil->stride[2]);
  p_a[11] = (char *)args[11].dat->data_d + base11;

  int base12 = args[12].dat->base_offset;
  base12 += dat12 * (start[0] * args[12].stencil->stride[0]);
  base12 += dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1]);
  base12 += dat12 *
    args[12].dat->size[0] *
    args[12].dat->size[1] *
    (start[2] * args[12].stencil->stride[2]);
  p_a[12] = (char *)args[12].dat->data_d + base12;

  int base13 = args[13].dat->base_offset;
  base13 += dat13 * (start[0] * args[13].stencil->stride[0]);
  base13 += dat13 *
    args[13].dat->size[0] *
    (start[1] * args[13].stencil->stride[1]);
  base13 += dat13 *
    args[13].dat->size[0] *
    args[13].dat->size[1] *
    (start[2] * args[13].stencil->stride[2]);
  p_a[13] = (char *)args[13].dat->data_d + base13;

  int base14 = args[14].dat->base_offset;
  base14 += dat14 * (start[0] * args[14].stencil->stride[0]);
  base14 += dat14 *
    args[14].dat->size[0] *
    (start[1] * args[14].stencil->stride[1]);
  base14 += dat14 *
    args[14].dat->size[0] *
    args[14].dat->size[1] *
    (start[2] * args[14].stencil->stride[2]);
  p_a[14] = (char *)args[14].dat->data_d + base14;

  int base15 = args[15].dat->base_offset;
  base15 += dat15 * (start[0] * args[15].stencil->stride[0]);
  base15 += dat15 *
    args[15].dat->size[0] *
    (start[1] * args[15].stencil->stride[1]);
  base15 += dat15 *
    args[15].dat->size[0] *
    args[15].dat->size[1] *
    (start[2] * args[15].stencil->stride[2]);
  p_a[15] = (char *)args[15].dat->data_d + base15;

  int base16 = args[16].dat->base_offset;
  base16 += dat16 * (start[0] * args[16].stencil->stride[0]);
  base16 += dat16 *
    args[16].dat->size[0] *
    (start[1] * args[16].stencil->stride[1]);
  base16 += dat16 *
    args[16].dat->size[0] *
    args[16].dat->size[1] *
    (start[2] * args[16].stencil->stride[2]);
  p_a[16] = (char *)args[16].dat->data_d + base16;

  int base17 = args[17].dat->base_offset;
  base17 += dat17 * (start[0] * args[17].stencil->stride[0]);
  base17 += dat17 *
    args[17].dat->size[0] *
    (start[1] * args[17].stencil->stride[1]);
  base17 += dat17 *
    args[17].dat->size[0] *
    args[17].dat->size[1] *
    (start[2] * args[17].stencil->stride[2]);
  p_a[17] = (char *)args[17].dat->data_d + base17;

  int base18 = args[18].dat->base_offset;
  base18 += dat18 * (start[0] * args[18].stencil->stride[0]);
  base18 += dat18 *
    args[18].dat->size[0] *
    (start[1] * args[18].stencil->stride[1]);
  base18 += dat18 *
    args[18].dat->size[0] *
    args[18].dat->size[1] *
    (start[2] * args[18].stencil->stride[2]);
  p_a[18] = (char *)args[18].dat->data_d + base18;

  int base19 = args[19].dat->base_offset;
  base19 += dat19 * (start[0] * args[19].stencil->stride[0]);
  base19 += dat19 *
    args[19].dat->size[0] *
    (start[1] * args[19].stencil->stride[1]);
  base19 += dat19 *
    args[19].dat->size[0] *
    args[19].dat->size[1] *
    (start[2] * args[19].stencil->stride[2]);
  p_a[19] = (char *)args[19].dat->data_d + base19;

  int base20 = args[20].dat->base_offset;
  base20 += dat20 * (start[0] * args[20].stencil->stride[0]);
  base20 += dat20 *
    args[20].dat->size[0] *
    (start[1] * args[20].stencil->stride[1]);
  base20 += dat20 *
    args[20].dat->size[0] *
    args[20].dat->size[1] *
    (start[2] * args[20].stencil->stride[2]);
  p_a[20] = (char *)args[20].dat->data_d + base20;

  int base21 = args[21].dat->base_offset;
  base21 += dat21 * (start[0] * args[21].stencil->stride[0]);
  base21 += dat21 *
    args[21].dat->size[0] *
    (start[1] * args[21].stencil->stride[1]);
  base21 += dat21 *
    args[21].dat->size[0] *
    args[21].dat->size[1] *
    (start[2] * args[21].stencil->stride[2]);
  p_a[21] = (char *)args[21].dat->data_d + base21;

  int base22 = args[22].dat->base_offset;
  base22 += dat22 * (start[0] * args[22].stencil->stride[0]);
  base22 += dat22 *
    args[22].dat->size[0] *
    (start[1] * args[22].stencil->stride[1]);
  base22 += dat22 *
    args[22].dat->size[0] *
    args[22].dat->size[1] *
    (start[2] * args[22].stencil->stride[2]);
  p_a[22] = (char *)args[22].dat->data_d + base22;

  int base23 = args[23].dat->base_offset;
  base23 += dat23 * (start[0] * args[23].stencil->stride[0]);
  base23 += dat23 *
    args[23].dat->size[0] *
    (start[1] * args[23].stencil->stride[1]);
  base23 += dat23 *
    args[23].dat->size[0] *
    args[23].dat->size[1] *
    (start[2] * args[23].stencil->stride[2]);
  p_a[23] = (char *)args[23].dat->data_d + base23;


  ops_H_D_exchanges_device(args, 24);
  ops_halo_exchanges(args,24,range);

  if (OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    OPS_kernels[18].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  ops_taylor_green_vortex_block0_10_kernel<<<grid, tblock, 0, stream >>> (  (double *)p_a[0], (double *)p_a[1],
           (double *)p_a[2], (double *)p_a[3],
           (double *)p_a[4], (double *)p_a[5],
           (double *)p_a[6], (double *)p_a[7],
           (double *)p_a[8], (double *)p_a[9],
           (double *)p_a[10], (double *)p_a[11],
           (double *)p_a[12], (double *)p_a[13],
           (double *)p_a[14], (double *)p_a[15],
           (double *)p_a[16], (double *)p_a[17],
           (double *)p_a[18], (double *)p_a[19],
           (double *)p_a[20], (double *)p_a[21],
           (double *)p_a[22], (double *)p_a[23],x_size, y_size, z_size);

  if (OPS_diags>1) {
    cutilSafeCall(cudaStreamSynchronize(stream));
    ops_timers_core(&c1,&t1);
    OPS_kernels[18].time += t1-t2;
  }

  ops_set_dirtybit_device(args, 24);
  ops_set_halo_dirtybit3(&args[19],range);
  ops_set_halo_dirtybit3(&args[20],range);
  ops_set_halo_dirtybit3(&args[21],range);
  ops_set_halo_dirtybit3(&args[22],range);
  ops_set_halo_dirtybit3(&args[23],range);

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    OPS_kernels[18].mpi_time += t2-t1;
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg1);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg2);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg3);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg4);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg5);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg6);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg7);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg8);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg9);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg10);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg11);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg12);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg13);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg14);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg15);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg16);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg17);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg18);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg19);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg20);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg21);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg22);
    OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg23);
  }
}

void ops_par_loop_taylor_green_vortex_block0_10_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15, ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19, ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->index = 18;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 18;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 24;
  desc->args = (ops_arg*)malloc(24*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->args[13] = arg13;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg13.dat->index;
  desc->args[14] = arg14;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg14.dat->index;
  desc->args[15] = arg15;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg15.dat->index;
  desc->args[16] = arg16;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg16.dat->index;
  desc->args[17] = arg17;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg17.dat->index;
  desc->args[18] = arg18;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg18.dat->index;
  desc->args[19] = arg19;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg19.dat->index;
  desc->args[20] = arg20;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg20.dat->index;
  desc->args[21] = arg21;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg21.dat->index;
  desc->args[22] = arg22;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg22.dat->index;
  desc->args[23] = arg23;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg23.dat->index;
  desc->function = ops_par_loop_taylor_green_vortex_block0_10_kernel_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(18,"taylor_green_vortex_block0_10_kernel");
  }
  ops_enqueue_kernel(desc);
}
