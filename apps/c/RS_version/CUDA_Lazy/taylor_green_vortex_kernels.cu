//
// auto-generated by ops.py//

//header
#define OPS_ACC_MD_MACROS
#define OPS_3D
#include "ops_lib_cpp.h"

#include "ops_cuda_rt_support.h"
#include "ops_cuda_reduction.h"

#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ int nx2;
__constant__ int nx1;
__constant__ double deltai2;
__constant__ double rinv8;
__constant__ double rinv9;
__constant__ double Minf;
__constant__ double rinv1;
__constant__ double rinv4;
__constant__ double rinv5;
__constant__ double rinv6;
__constant__ double Pr;
__constant__ double rinv12;
__constant__ double rinv13;
__constant__ double deltat;
__constant__ double rinv14;
__constant__ double rinv15;
__constant__ double rc0;
__constant__ double rc2;
__constant__ double rc3;
__constant__ int nx0;
__constant__ double deltai1;
__constant__ double rc10;
__constant__ double deltai0;
__constant__ double Re;
__constant__ double rinv7;
__constant__ double gama;
__constant__ double rc11;

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (!strcmp(name,"nx2")) {
    cutilSafeCall(cudaMemcpyToSymbol(nx2, dat, dim*size));
  }
  else
  if (!strcmp(name,"nx1")) {
    cutilSafeCall(cudaMemcpyToSymbol(nx1, dat, dim*size));
  }
  else
  if (!strcmp(name,"deltai2")) {
    cutilSafeCall(cudaMemcpyToSymbol(deltai2, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv8")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv8, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv9")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv9, dat, dim*size));
  }
  else
  if (!strcmp(name,"Minf")) {
    cutilSafeCall(cudaMemcpyToSymbol(Minf, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv1")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv1, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv4")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv4, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv5")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv5, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv6")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv6, dat, dim*size));
  }
  else
  if (!strcmp(name,"Pr")) {
    cutilSafeCall(cudaMemcpyToSymbol(Pr, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv12")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv12, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv13")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv13, dat, dim*size));
  }
  else
  if (!strcmp(name,"deltat")) {
    cutilSafeCall(cudaMemcpyToSymbol(deltat, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv14")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv14, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv15")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv15, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc0")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc0, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc2")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc2, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc3")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc3, dat, dim*size));
  }
  else
  if (!strcmp(name,"nx0")) {
    cutilSafeCall(cudaMemcpyToSymbol(nx0, dat, dim*size));
  }
  else
  if (!strcmp(name,"deltai1")) {
    cutilSafeCall(cudaMemcpyToSymbol(deltai1, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc10")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc10, dat, dim*size));
  }
  else
  if (!strcmp(name,"deltai0")) {
    cutilSafeCall(cudaMemcpyToSymbol(deltai0, dat, dim*size));
  }
  else
  if (!strcmp(name,"Re")) {
    cutilSafeCall(cudaMemcpyToSymbol(Re, dat, dim*size));
  }
  else
  if (!strcmp(name,"rinv7")) {
    cutilSafeCall(cudaMemcpyToSymbol(rinv7, dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    cutilSafeCall(cudaMemcpyToSymbol(gama, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc11")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc11, dat, dim*size));
  }
  else
  {
    printf("error: unknown const name\n"); exit(1);
  }
}

extern cudaStream_t stream;

//user kernel files
#include "taylor_green_vortex_block0_14_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_15_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_16_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_17_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_18_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_19_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_20_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_13_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_0_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_1_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_2_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_3_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_4_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_5_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_6_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_7_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_8_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_9_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_10_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_11_kernel_cuda_kernel.cu"
#include "taylor_green_vortex_block0_12_kernel_cuda_kernel.cu"
