//
// auto-generated by ops.py on 2014-07-09 17:28
//

#include "./MPI_OpenMP_XeonPhi/clover_leaf_common.h"

extern int xdim0_calc_dt_kernel_get;
extern int xdim1_calc_dt_kernel_get;

#ifdef __cplusplus
extern "C" {
#endif
void calc_dt_kernel_get_c_wrapper(
  double *p_a0,
  double *p_a1,
  double *p_a2,
  double *p_a3,
  int x_size, int y_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_calc_dt_kernel_get(char const *name, ops_block Block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3) {

  ops_arg args[4] = { arg0, arg1, arg2, arg3};

  sub_block_list sb = OPS_sub_block_list[Block->index];
  //compute localy allocated range for the sub-block
  int start_add[2];
  int end_add[2];
  for ( int n=0; n<2; n++ ){
    start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
    if (start_add[n] >= range[2*n]) {
      start_add[n] = 0;
    }
    else {
      start_add[n] = range[2*n] - start_add[n];
    }
    if (end_add[n] >= range[2*n+1]) {
      end_add[n] = range[2*n+1] - sb->istart[n];
    }
    else {
      end_add[n] = sb->sizes[n];
    }
  }


  int x_size = MAX(0,end_add[0]-start_add[0]);
  int y_size = MAX(0,end_add[1]-start_add[1]);


  //Timing
  double t1,t2,c1,c2;
  ops_timing_realloc(73,"calc_dt_kernel_get");
  ops_timers_core(&c2,&t2);

  if (OPS_kernels[73].count == 0) {
    xdim0_calc_dt_kernel_get = args[0].dat->block_size[0]*args[0].dat->dim;
    xdim1_calc_dt_kernel_get = args[1].dat->block_size[0]*args[1].dat->dim;
  }

  int dat0 = args[0].dat->size;
  int dat1 = args[1].dat->size;


  //set up initial pointers
  int base0 = dat0 * 1 * 
    (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
  base0 = base0+ dat0 *
    args[0].dat->block_size[0] *
    (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
  double *p_a0 = (double *)((char *)args[0].data + base0);

  int base1 = dat1 * 1 * 
    (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
  base1 = base1+ dat1 *
    args[1].dat->block_size[0] *
    (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
  double *p_a1 = (double *)((char *)args[1].data + base1);

  double *p_a2 = (double *)args[2].data;

  double *p_a3 = (double *)args[3].data;


  ops_H_D_exchanges(args, 4);
  ops_halo_exchanges(args,4,range);

  ops_timers_core(&c1,&t1);
  OPS_kernels[73].mpi_time += t1-t2;

  calc_dt_kernel_get_c_wrapper(
    p_a0,
    p_a1,
    p_a2,
    p_a3,
    x_size, y_size);
  *(double *)args[2].data = *p_a2;
  *(double *)args[3].data = *p_a3;

  ops_timers_core(&c2,&t2);
  OPS_kernels[73].time += t2-t1;
  ops_mpi_reduce(&arg2,(double *)args[2].data);
  ops_mpi_reduce(&arg3,(double *)args[3].data);
  ops_timers_core(&c1,&t1);
  OPS_kernels[73].mpi_time += t1-t2;
  ops_set_dirtybit_host(args, 4);

  //Update kernel record
  OPS_kernels[73].count++;
  OPS_kernels[73].transfer += ops_compute_transfer(dim, range, &arg0);
  OPS_kernels[73].transfer += ops_compute_transfer(dim, range, &arg1);
}
